name: linters
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Run linter
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.21

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build -v ./...

    - name: Run go vet
      run: go vet ./...

    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      run: staticcheck ./...

    - name: Install golint
      run: go install golang.org/x/lint/golint@latest

    - name: Run golint
      run: golint $(ls -d1 */ | sed s/\\//\\/.../g | grep -v -E "^vendor/" | tr "\n" " ")

    - name: Run tests
      run: go test -race -vet=off ./...

  build:
    name: Build RPM
    runs-on: ubuntu-latest
    needs: lint
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        path: "REPO"

    - name: Build RPM package el7
      uses: addnab/docker-run-action@v3
      with:
        image: centos:7
        options: -v ${{ github.workspace }}:/onlineconf-yaml -e PKG_NAME=onlineconf-yaml
        run: |
          cd /onlineconf-yaml/REPO
          PKG_VER=$(cat version.txt)
          RELEASE_ID=$(date +%Y%m%d)

          sed -i s/mirror.centos.org/vault.centos.org/g /etc/yum.repos.d/*.repo
          sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo
          sed -i s/^mirrorlist=http/#mirrorlist=http/g /etc/yum.repos.d/*.repo

          yum clean all
          yum install -y yum-utils
          yum-config-manager --add-repo https://mirror.go-repo.io/centos/go-repo.repo
          yum update -y --nogpgcheck
          yum install -y --nogpgcheck rpm-build git make which pkgconfig systemd-devel rpmlint golang-1.21

          git archive --format=tar HEAD --prefix="${PKG_NAME}-${PKG_VER}/" | gzip > "${PKG_NAME}-${PKG_VER}.tar.gz"
          yum-builddep -y "${PKG_NAME}.spec"
          rpmbuild -ba --define "_sourcedir $PWD" --define "__version $PKG_VER" --define "__release $RELEASE_ID" "${PKG_NAME}.spec"
          mv $HOME/rpmbuild/RPMS/x86_64/*rpm ./
          mv $HOME/rpmbuild/SRPMS/*rpm ./

    - name: Build RPM package el9
      uses: addnab/docker-run-action@v3
      with:
        image: almalinux:9
        options: -v ${{ github.workspace }}:/onlineconf-yaml -e PKG_NAME=onlineconf-yaml
        run: |
          cd /onlineconf-yaml/REPO
          PKG_VER=$(cat version.txt)
          RELEASE_ID=$(date +%Y%m%d)

          sed -i s/mirror.centos.org/vault.centos.org/g /etc/yum.repos.d/*.repo
          sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo
          sed -i s/^mirrorlist=http/#mirrorlist=http/g /etc/yum.repos.d/*.repo

          yum clean all
          yum install -y --nogpgcheck yum-utils rpm-build git make which pkgconfig systemd-devel rpmlint golang

          # "${PKG_NAME}-${PKG_VER}.tar.gz" already exists after previous step
          yum-builddep -y "${PKG_NAME}.spec"
          rpmbuild -ba --define "_sourcedir $PWD" --define "__version $PKG_VER" --define "__release $RELEASE_ID" "${PKG_NAME}.spec"
          mv $HOME/rpmbuild/RPMS/x86_64/*rpm ./
          mv $HOME/rpmbuild/SRPMS/*rpm ./

    - name: Set RPM variable
      id: rpm
      run: |
        cd REPO
        echo "name=$(ls -t *.rpm | head -1)" >> $GITHUB_OUTPUT
        echo "version=$(cat version.txt)" >> $GITHUB_OUTPUT
        echo "release_version=v$(cat version.txt)" >> $GITHUB_OUTPUT

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GO_RELEASER_GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.rpm.outputs.release_version }}
        release_name: Release ${{ steps.rpm.outputs.release_version }}
        draft: false
        prerelease: false

    - name: Upload release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GO_RELEASER_GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/REPO/${{ steps.rpm.outputs.name }}
        asset_name: ${{ steps.rpm.outputs.name }}
        asset_content_type: application/octet-stream
